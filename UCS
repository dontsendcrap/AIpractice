import heapq

def uniform_cost_search(graph, start, goal):
    visited = set()
    queue = [(0, start, [start])]  # (cost, current_node, path)

    while queue:
        cost, node, path = heapq.heappop(queue)

        if node == goal:
            return path, cost

        if node in visited:
            continue
        visited.add(node)

        for neighbor, weight in graph.get(node, []):
            if neighbor not in visited:
                heapq.heappush(queue, (cost + weight, neighbor, path + [neighbor]))

    return None, float('inf')


graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 2), ('E', 5)],
    'C': [('F', 3)],
    'D': [],
    'E': [('F', 1)],
    'F': []
}


path, total_cost = uniform_cost_search(graph, 'A', 'F')
print("Path:", path)
print("Total Cost:", total_cost)
