#Robo Path Planning 1

import heapq

graph = {
    '11': [('12', 1), ('21', 1)],
    '21': [('22', 1), ('31', 1), ('11', 1)],
    '31': [('21', 1), ('32', 1), ('41', 1)],
    '41': [('31', 1), ('42', 1)],
    '12': [('11', 1), ('13', 1), ('22', 1)],
    '22': [('21', 1), ('12', 1)],
    '32': [('31', 1), ('22', 1), ('42', 1)],
    '42': [('41', 1), ('32', 1)],
    '13': [('12', 1), ('14', 1), ('23', 1)],
    '23': [('13', 1), ('24', 1), ('33', 1)],
    '33': [('23', 1), ('34', 1), ('43', 1)],
    '43': [('33', 1), ('44', 1)],
    '14': [('13', 1), ('15', 1), ('24', 1)],
    '24': [('14', 1), ('23', 1), ('25', 1), ('34', 1)],
    '34': [('33', 1), ('24', 1), ('35', 1), ('44', 1)],
    '44': [('43', 1), ('34', 1), ('45', 1)],
    '15': [('14', 1), ('16', 1)],
    '25': [('24', 1), ('26', 1), ('35', 1)],
    '35': [('34', 1), ('25', 1), ('36', 1), ('45', 1)],
    '45': [('44', 1), ('35', 1), ('46', 1)],
    '16': [('15', 1)],
    '26': [('25', 1), ('36', 1)],
    '36': [('35', 1), ('26', 1), ('46', 1)],
    '46': [('45', 1), ('36', 1)]
}
heuristic = {
    '11': 6, '12': 5, '13': 4, '14': 3, '15': 2, '16': 3,
    '21': 5, '22': 4, '23': 3, '24': 2, '25': 1, '26': 2,
    '31': 4, '32': 3, '33': 2, '34': 1, '35': 0, '36': 1,
    '41': 5, '42': 4, '43': 3, '44': 2, '45': 1, '46': 2
}

def Astar (start , goal ):


    queue = [(0+heuristic[start] , 0 , start , [start])]


    visited = set()

    while queue :

        f , g , node , path = heapq.heappop(queue)

        if node == goal :

            return g , path
        
        if node in visited:

            continue 

        visited.add(node)


        for nei , cost in graph.get(node , []):

            if nei not in visited:

                new_g = g + cost

                new_f = new_g + heuristic[nei]


                heapq.heappush(queue , (new_f , new_g , nei , path +[nei]))


print(Astar('32' ,'35'))
