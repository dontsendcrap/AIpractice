#Robo Path Planning 2 

import heapq

graph = {
    '11': [('12', 1), ('21', 1)],
    '21': [('22', 1), ('31', 1), ('11', 1)],
    '31': [('21', 1), ('32', 1), ('41', 1)],
    '41': [('31', 1), ('42', 1)],
    '12': [('11', 1), ('13', 1), ('22', 1)],
    '22': [('21', 1), ('12', 1)],
    '32': [('31', 1), ('22', 1), ('42', 1)],
    '42': [('41', 1), ('32', 1)],
    '13': [('12', 1), ('14', 1), ('23', 1)],
    '23': [('13', 1), ('24', 1), ('33', 1)],
    '33': [('23', 1), ('34', 1), ('43', 1)],
    '43': [('33', 1), ('44', 1)],
    '14': [('13', 1), ('15', 1), ('24', 1)],
    '24': [('14', 1), ('23', 1), ('25', 1), ('34', 1)],
    '34': [('33', 1), ('24', 1), ('35', 1), ('44', 1)],
    '44': [('43', 1), ('34', 1), ('45', 1)],
    '15': [('14', 1), ('16', 1)],
    '25': [('24', 1), ('26', 1), ('35', 1)],
    '35': [('34', 1), ('25', 1), ('36', 1), ('45', 1)],
    '45': [('44', 1), ('35', 1), ('46', 1)],
    '16': [('15', 1)],
    '26': [('25', 1), ('36', 1)],
    '36': [('35', 1), ('26', 1), ('46', 1)],
    '46': [('45', 1), ('36', 1)]
}

# Chebyshev distance to '35'
heuristic = {
    '11': max(abs(3-1), abs(5-1)),  # max(2, 4) = 4
    '12': max(abs(3-1), abs(5-2)),   # max(2, 3) = 3
    '13': max(abs(3-1), abs(5-3)),   # max(2, 2) = 2
    '14': max(abs(3-1), abs(5-4)),   # max(2, 1) = 2
    '15': max(abs(3-1), abs(5-5)),   # max(2, 0) = 2
    '16': max(abs(3-1), abs(5-6)),   # max(2, 1) = 2
    '21': max(abs(3-2), abs(5-1)),   # max(1, 4) = 4
    '22': max(abs(3-2), abs(5-2)),   # max(1, 3) = 3
    '23': max(abs(3-2), abs(5-3)),   # max(1, 2) = 2
    '24': max(abs(3-2), abs(5-4)),   # max(1, 1) = 1
    '25': max(abs(3-2), abs(5-5)),   # max(1, 0) = 1
    '26': max(abs(3-2), abs(5-6)),   # max(1, 1) = 1
    '31': max(abs(3-3), abs(5-1)),   # max(0, 4) = 4
    '32': max(abs(3-3), abs(5-2)),   # max(0, 3) = 3
    '33': max(abs(3-3), abs(5-3)),   # max(0, 2) = 2
    '34': max(abs(3-3), abs(5-4)),   # max(0, 1) = 1
    '35': max(abs(3-3), abs(5-5)),   # max(0, 0) = 0
    '36': max(abs(3-3), abs(5-6)),   # max(0, 1) = 1
    '41': max(abs(3-4), abs(5-1)),   # max(1, 4) = 4
    '42': max(abs(3-4), abs(5-2)),   # max(1, 3) = 3
    '43': max(abs(3-4), abs(5-3)),   # max(1, 2) = 2
    '44': max(abs(3-4), abs(5-4)),   # max(1, 1) = 1
    '45': max(abs(3-4), abs(5-5)),   # max(1, 0) = 1
    '46': max(abs(3-4), abs(5-6))    # max(1, 1) = 1
}

def Astar(start, goal):
    queue = [(0 + heuristic[start], 0, start, [start])]
    visited = set()

    while queue:
        f, g, node, path = heapq.heappop(queue)

        if node == goal:
            return g, path

        if node in visited:
            continue

        visited.add(node)

        for nei, cost in graph.get(node, []):
            if nei not in visited:
                new_g = g + cost
                new_f = new_g + heuristic[nei]
                heapq.heappush(queue, (new_f, new_g, nei, path + [nei]))

print(Astar('32', '35'))
