import heapq

def a_star(graph, start, goal, heuristic):
    # Priority queue: (f, g, node, path)
    queue = [(0 + heuristic[start], 0, start, [start])]
    visited = set()

    while queue:
        f, g, node, path = heapq.heappop(queue)

        if node == goal:
            return path, g

        if node in visited:
            continue
        visited.add(node)

        for neighbor, cost in graph.get(node, []):
            if neighbor not in visited:
                new_g = g + cost
                new_f = new_g + heuristic[neighbor]
                heapq.heappush(queue, (new_f, new_g, neighbor, path + [neighbor]))

    return None, float('inf')

# Example graph and heuristic
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 2), ('E', 5)],
    'C': [('F', 3)],
    'D': [],
    'E': [('F', 1)],
    'F': []
}

heuristic = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 1,
    'E': 1,
    'F': 0
}

# Run A* Search
path, cost = a_star(graph, 'A', 'F', heuristic)
print("Path:", path)  # Output: ['A', 'B', 'E', 'F']
print("Total Cost:", cost)  # Output: 7
